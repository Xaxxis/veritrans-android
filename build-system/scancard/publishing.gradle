apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven-publish'
apply from: "$rootDir/build-system/publish-variable.gradle"

version = versionSdk
group = groupIdSdk

task sourceJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier "source"
}

publishing {
    publications {
        BintraySandbox(MavenPublication) {
            groupId group
            artifactId 'scancard'
            version this.version + "-SANDBOX"
            artifact(sourceJar)
            artifact("$buildDir/outputs/aar/${artifactId}-development-release.aar")

            //The publication doesn't know about our dependencies, so we have to manually add them to the pom
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                //Iterate over the implementation dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.implementation.allDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    if (it.group == 'com.midtrans') {
                        dependencyNode.appendNode('version', it.version + '-SANDBOX')
                    } else {
                        dependencyNode.appendNode('version', it.version)
                    }
                }

                configurations.developmentImplementation.allDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                }
            }
        }

        BintrayUat(MavenPublication) {
            groupId group
            artifactId 'scancard'
            version this.version + "-UAT"
            artifact(sourceJar)
            artifact("$buildDir/outputs/aar/${artifactId}-uat-release.aar")

            //The publication doesn't know about our dependencies, so we have to manually add them to the pom
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                //Iterate over the implementation dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.implementation.allDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    if (it.group == 'com.midtrans') {
                        dependencyNode.appendNode('version', it.version + '-SANDBOX')
                    } else {
                        dependencyNode.appendNode('version', it.version)
                    }
                }

                configurations.uatImplementation.allDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                }
            }
        }

        BintrayProduction(MavenPublication) {
            groupId group
            artifactId 'scancard'
            version this.version
            artifact(sourceJar)
            artifact("$buildDir/outputs/aar/${artifactId}-production-release.aar")

            //The publication doesn't know about our dependencies, so we have to manually add them to the pom
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                //Iterate over the implementation dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.implementation.allDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                }

                configurations.productionImplementation.allDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                }
            }
        }
    }
}

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')
    configurations = ['archives']
    pkg {
        repo = bintrayRepo
        name = project.name
        userOrg = bintrayOrg
        licenses = allLicenses
        vcsUrl = gitUrl
        desc = 'External scanner plugin for Midtrans Android SDK'
        websiteUrl = siteUrl
        publish = true
        publicDownloadNumbers = true
    }
    publications = ['BintrayProduction', 'BintraySandbox', 'BintrayUat']
}